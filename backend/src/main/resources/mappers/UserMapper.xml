<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shareknowledge.api.mapper.UserMapper">
    
    <!-- 사용자 결과 매핑 -->
    <resultMap id="UserResultMap" type="com.shareknowledge.api.model.User">
        <id property="id" column="id" />
        <result property="username" column="username" />
        <result property="email" column="email" />
        <result property="password" column="password" />
        <result property="firstName" column="first_name" />
        <result property="lastName" column="last_name" />
        <result property="profileImageUrl" column="profile_image_url" />
        <result property="bio" column="bio" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
        <!-- 역할 정보는 별도의 쿼리로 처리 -->
    </resultMap>
    
    <!-- 공통으로 사용되는 사용자 컬럼 -->
    <sql id="userColumns">
        id, username, email, password, first_name, last_name, profile_image_url, bio, created_at, updated_at
    </sql>
    
    <!-- 전체 사용자 조회 -->
    <select id="findAll" resultMap="UserResultMap">
        SELECT <include refid="userColumns" />
        FROM users
        ORDER BY id
    </select>
    
    <!-- ID로 사용자 조회 -->
    <select id="findById" parameterType="long" resultMap="UserResultMap">
        SELECT <include refid="userColumns" />
        FROM users
        WHERE id = #{id}
    </select>
    
    <!-- 사용자명으로 사용자 조회 -->
    <select id="findByUsername" parameterType="string" resultMap="UserResultMap">
        SELECT <include refid="userColumns" />
        FROM users
        WHERE username = #{username}
    </select>
    
    <!-- 이메일로 사용자 조회 -->
    <select id="findByEmail" parameterType="string" resultMap="UserResultMap">
        SELECT <include refid="userColumns" />
        FROM users
        WHERE email = #{email}
    </select>
    
    <!-- 사용자 등록 -->
    <insert id="insert" parameterType="com.shareknowledge.api.model.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (
            username, email, password, first_name, last_name, profile_image_url, bio, created_at, updated_at
        ) VALUES (
            #{username}, #{email}, #{password}, #{firstName}, #{lastName}, #{profileImageUrl}, #{bio}, 
            #{createdAt}, #{updatedAt}
        )
    </insert>
    
    <!-- 사용자 정보 업데이트 -->
    <update id="update" parameterType="com.shareknowledge.api.model.User">
        UPDATE users
        SET username = #{username},
            email = #{email},
            password = #{password},
            first_name = #{firstName},
            last_name = #{lastName},
            profile_image_url = #{profileImageUrl},
            bio = #{bio},
            updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>
    
    <!-- 사용자 삭제 -->
    <delete id="deleteById" parameterType="long">
        DELETE FROM users
        WHERE id = #{id}
    </delete>
    
    <!-- 사용자명 존재 여부 확인 -->
    <select id="existsByUsername" parameterType="string" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM users
        WHERE username = #{username}
    </select>
    
    <!-- 이메일 존재 여부 확인 -->
    <select id="existsByEmail" parameterType="string" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM users
        WHERE email = #{email}
    </select>
    
</mapper> 